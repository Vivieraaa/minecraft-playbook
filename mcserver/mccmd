#!/bin/bash -e


#Check if the port is closed and the service is running, if so, restart the service
port_check_restart() { 
    nc -z -v "192.168.1.217" 25565 || { systemctl is-active --quiet minecraft.service && restart_serverctl; }
}
restart_serverctl() {
    echo '~~~ Server Restart Sent: $(date) ~~~' >> /opt/mcserver/logs/startlogs.txt
    WEBHOOK_URL="https://discord.com/api/webhooks/1078051322693161051/ep5pWQ-uNDKnp90omG5JhsjkYud9fk_oFUwNjDF-94UnbOgZCCy4qySnuWQSAlHtWhUK"
    curl \
      -H "Content-Type: application/json" \
      -d '{"embeds": [ { "title": "Server Restart", "description": "Minecraft server has restarted due to port closure.", "color": 16711761, "fields": [ { "name": "Restart Time", "value": "<t:'"$(date +%s)"':F>", "inline": true}, { "name": "Time of Restart", "value": "<t:'"$(date +%s)"':R>", "inline": true}]}]}' \
      $WEBHOOK_URL
    systemctl restart minecraft.service
}

#Get the latests world backup and move it to the backupslongterm folder, run by cron once a week
clean_backups() {
    cd /opt/mcserver/fullbackupstaging
    mv "$(ls -t | tail -n 1)" /opt/mcserver/backupslongterm
    rm ./*
}

#Run a command in the server's screen session
server_run()  {
    run_as_mc screen -S Minecraft -p 0 -X stuff "\n\n$@\n"
}
run_as_mc() {
    if [[ "$(id -un)" != "mc" ]]; then
        sudo -u mc "$@"
    else
        "$@"
    fi
}

#Notify server of restart in 5 minutes
notify_restart() {
    server_run "say §L§EServer Restart in §N5 Minutes"
    sleep 4m
    server_run "say §L§CServer Restart in §N1 Minute"
    sleep 1m
    server_run "say §L§4Restarting"
    sleep 1s
}

#restart service
restart_server_service() {
    systemctl restart minecraft.service
}
stop_server_service() {
    systemctl stop minecraft.service
}
start_server_service() {
    systemctl start minecraft.service
}

#Starts the server in a detached screen
start_screen() {
    run_as_mc screen -dmS Minecraft /opt/mcserver/foxxolay/run.sh
}
#Sends minecraft "stop" and waits for screen session to close, if not closed after 5 minutes, exit
system_stop_screen() {
    server_run "stop"
    for i in {0..300};
    do
        sleep 1
        if ! run_as_mc bash -c 'screen -list | grep -q "Minecraft"'; then
            exit 0
        fi
    done
}

#Log times
log_start() {
    date >> /opt/mcserver/logs/startlogs.txt
}
log_stop() {
    echo "~~~ Server Stop Sent: $(date) ~~~" >> /opt/mcserver/logs/startlogs.txt
}
log_restart() {
    echo "~~~ Force Server Restart Sent: $(date) ~~~" >> /opt/mcserver/logs/startlogs.txt
}

#Server failure Command, logs date, sends discord webhook
start_failure() {
    echo '^^^ Minecraft Service Entered Failed State ^^^' >> /opt/mcserver/logs/startlogs.txt

    WEBHOOK_URL="https://discord.com/api/webhooks/1078051322693161051/ep5pWQ-uNDKnp90omG5JhsjkYud9fk_oFUwNjDF-94UnbOgZCCy4qySnuWQSAlHtWhUK"
    curl \
      -H "Content-Type: application/json" \
      -d '{"embeds": [ { "title": "Server Failure", "description": "Minecraft server has entered a failed state.", "color": 16711761, "fields": [ { "name": "Failure Time", "value": "<t:'"$(date +%s)"':F>", "inline": true}, { "name": "Time of Failure", "value": "<t:'"$(date +%s)"':R>", "inline": true}]}]}' \
      $WEBHOOK_URL
}

#Basic Backup
copy_backup() {
    rm -rf /tmp/backup
    cp -r /opt/mcserver/foxxolay/world /tmp/backup
}
#Used with copy backup
compress_backup() {
    tar -I 'xz -9 -T0' -cf /opt/mcserver/fullbackupstaging/"$(date)".tar.xz /tmp/backup
    rm -rf /tmp/backup
}

#rdiff backup world to rdiffbackups world folder
r_backup() {
    rdiff-backup --print-statistics /opt/mcserver/foxxolay/world /opt/mcserver/rdiffbackups/world
}
r_clean() {
    rdiff-backup --remove-older-than 1W /opt/mcserver/rdiffbackups/world
}

main() {
    case $1 in
    port-check-restart) 
        port_check_restart
        ;;
    run) 
        shift
        server_run "$@"
        ;;
    clean-backups)
        clean_backups
        ;;
    slow-restart)
        notify_restart
        log_restart
        restart_server_service
        ;;
    fast-restart)
        log_restart
        restart_server_service
        ;;
    start-server)
        log_start
        start_server_service
        ;;
    stop-server)
        log_stop
        stop_server_service
        ;;
    system-start-server)
        log_start
        start_screen
        ;;
    system-stop-server)
        log_stop
        system_stop_screen
        ;;
    system-start-failure)
        start_failure
        ;;
    backup-restart)
        notify_restart
        stop_server_service
        copy_backup
        compress_backup
        start_server_service
        ;;
    running-backup)
        server_run "save-off"
        server_run "save-all"
        sleep 20
        r_backup
        server_run "save-on"
        r_clean
        ;;
    esac
}

main "$@"